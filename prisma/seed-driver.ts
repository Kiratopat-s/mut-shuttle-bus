// prisma/seed-driver.ts
// prisma/seed-driver-data.ts
import { PrismaClient } from '../src/generated/prisma';

const prisma = new PrismaClient();

async function seedDriverData() {
  try {
    console.log('üöå Seeding driver data...');

    // Create Vehicle Types
    const busType = await prisma.vehicleType.upsert({
      where: { VehicleTypeName: '‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á' },
      update: {},
      create: {
        VehicleTypeName: '‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á',
        defaultCapacity: 30,
      },
    });

    const vanType = await prisma.vehicleType.upsert({
      where: { VehicleTypeName: '‡∏£‡∏ñ‡∏ï‡∏π‡πâ' },
      update: {},
      create: {
        VehicleTypeName: '‡∏£‡∏ñ‡∏ï‡∏π‡πâ',
        defaultCapacity: 15,
      },
    });

    // Create Bus Stops ‡∏ï‡∏≤‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    const busStops = [];
    
    // ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£
    let busStop1 = await prisma.busStop.findFirst({
      where: { stopName: "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£" }
    });
    if (!busStop1) {
      busStop1 = await prisma.busStop.create({
        data: {
          stopName: "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
          lat: 13.7563,
          lng: 100.5018,
        },
      });
    }
    busStops.push(busStop1);

    // ‡πÇ‡∏•‡∏ï‡∏±‡∏™‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ
    let busStop2 = await prisma.busStop.findFirst({
      where: { stopName: "‡πÇ‡∏•‡∏ï‡∏±‡∏™‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ" }
    });
    if (!busStop2) {
      busStop2 = await prisma.busStop.create({
        data: {
          stopName: "‡πÇ‡∏•‡∏ï‡∏±‡∏™‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ",
          lat: 13.765,
          lng: 100.538,
        },
      });
    }
    busStops.push(busStop2);

    // ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ
    let busStop3 = await prisma.busStop.findFirst({
      where: { stopName: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ" }
    });
    if (!busStop3) {
      busStop3 = await prisma.busStop.create({
        data: {
          stopName: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ",
          lat: 13.75,
          lng: 100.49,
        },
      });
    }
    busStops.push(busStop3);

    // Big C ‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ
    let busStop4 = await prisma.busStop.findFirst({
      where: { stopName: "Big C ‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ" }
    });
    if (!busStop4) {
      busStop4 = await prisma.busStop.create({
        data: {
          stopName: "Big C ‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ",
          lat: 13.74,
          lng: 100.52,
        },
      });
    }
    busStops.push(busStop4);

    // ‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ
    let busStop5 = await prisma.busStop.findFirst({
      where: { stopName: "‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏´‡∏ô‡∏≠‡∏á‡∏à‡∏≠‡∏Å" }
    });
    if (!busStop5) {
      busStop5 = await prisma.busStop.create({
        data: {
          stopName: "‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏´‡∏ô‡∏≠‡∏á‡∏à‡∏≠‡∏Å",
          lat: 13.73,
          lng: 100.51,
        },
      });
    }
    busStops.push(busStop5);

    // ‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏ö‡πâ‡πÄ‡∏ö‡πâ
    let busStop6 = await prisma.busStop.findFirst({
      where: { stopName: "‡∏£‡πâ‡∏≤‡∏ô‡∏™‡πâ‡∏°‡∏ï‡∏≥‡∏õ‡πâ‡∏≤‡∏ô‡∏≤‡∏á" }
    });
    if (!busStop6) {
      busStop6 = await prisma.busStop.create({
        data: {
          stopName: "‡∏£‡πâ‡∏≤‡∏ô‡∏™‡πâ‡∏°‡∏ï‡∏≥‡∏õ‡πâ‡∏≤‡∏ô‡∏≤‡∏á",
          lat: 13.72,
          lng: 100.50,
        },
      });
    }
    busStops.push(busStop6);

    // Create Routes ‡∏ï‡∏≤‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    const routes = await Promise.all([
      // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 1 - ‡∏£‡∏ß‡∏° 30 ‡∏ô‡∏≤‡∏ó‡∏µ
      prisma.route.upsert({
        where: { routeName: '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 1' },
        update: {},
        create: {
          routeName: '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 1',
          overallTravelTime: 30,
        },
      }),
      // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 2 - ‡∏£‡∏ß‡∏° 13 ‡∏ô‡∏≤‡∏ó‡∏µ
      prisma.route.upsert({
        where: { routeName: '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 2' },
        update: {},
        create: {
          routeName: '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 2',
          overallTravelTime: 13,
        },
      }),
      // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 3 - ‡∏£‡∏ß‡∏° 12 ‡∏ô‡∏≤‡∏ó‡∏µ
      prisma.route.upsert({
        where: { routeName: '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 3' },
        update: {},
        create: {
          routeName: '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 3',
          overallTravelTime: 12,
        },
      }),
    ]);

    // Create Route Bus Stops ‡∏ï‡∏≤‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    await prisma.routeBusStop.deleteMany({
      where: {
        routeId: {
          in: routes.map(r => r.routeId)
        }
      }
    });

    // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 1 (7 ‡∏à‡∏∏‡∏î)
    const route1Stops = [
      { stopIndex: 0, travelTime: 0, stopOrder: 1, nextStopIndex: 1 }, // ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ -> ‡πÇ‡∏•‡∏ï‡∏±‡∏™
      { stopIndex: 1, travelTime: 5, stopOrder: 2, nextStopIndex: 2 }, // ‡πÇ‡∏•‡∏ï‡∏±‡∏™‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ -> ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
      { stopIndex: 2, travelTime: 3, stopOrder: 3, nextStopIndex: 3 }, // ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ -> Big C
      { stopIndex: 3, travelTime: 6, stopOrder: 4, nextStopIndex: 2 }, // Big C ‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ -> ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
      { stopIndex: 2, travelTime: 3, stopOrder: 5, nextStopIndex: 1 }, // ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ -> ‡πÇ‡∏•‡∏ï‡∏±‡∏™
      { stopIndex: 1, travelTime: 3, stopOrder: 6, nextStopIndex: 0 }, // ‡πÇ‡∏•‡∏ï‡∏±‡∏™‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ -> ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
      { stopIndex: 0, travelTime: 10, stopOrder: 7, nextStopIndex: 0 }, // ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ -> ‡∏à‡∏ö
    ];

    for (const stop of route1Stops) {
      await prisma.routeBusStop.create({
        data: {
          routeId: routes[0].routeId,
          busStopId: busStops[stop.stopIndex].busStopId,
          nextStopId: busStops[stop.nextStopIndex].busStopId,
          stopOrder: stop.stopOrder,
          travelTime: stop.travelTime,
        },
      });
    }

    // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 2 (4 ‡∏à‡∏∏‡∏î)
    const route2Stops = [
      { stopIndex: 0, travelTime: 0, stopOrder: 1, nextStopIndex: 1 }, // ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ -> ‡πÇ‡∏•‡∏ï‡∏±‡∏™
      { stopIndex: 1, travelTime: 5, stopOrder: 2, nextStopIndex: 4 }, // ‡πÇ‡∏•‡∏ï‡∏±‡∏™‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ -> ‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡πå
      { stopIndex: 4, travelTime: 3, stopOrder: 3, nextStopIndex: 5 }, // ‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ -> ‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      { stopIndex: 5, travelTime: 5, stopOrder: 4, nextStopIndex: 0 }, // ‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏ö‡πâ‡πÄ‡∏ö‡πâ -> ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
    ];

    for (const stop of route2Stops) {
      await prisma.routeBusStop.create({
        data: {
          routeId: routes[1].routeId,
          busStopId: busStops[stop.stopIndex].busStopId,
          nextStopId: busStops[stop.nextStopIndex].busStopId,
          stopOrder: stop.stopOrder,
          travelTime: stop.travelTime,
        },
      });
    }

    // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 3 (5 ‡∏à‡∏∏‡∏î)
    const route3Stops = [
      { stopIndex: 3, travelTime: 0, stopOrder: 1, nextStopIndex: 1 }, // Big C ‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ -> ‡πÇ‡∏•‡∏ï‡∏±‡∏™
      { stopIndex: 1, travelTime: 5, stopOrder: 2, nextStopIndex: 4 }, // ‡πÇ‡∏•‡∏ï‡∏±‡∏™‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ -> ‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡πå
      { stopIndex: 4, travelTime: 3, stopOrder: 3, nextStopIndex: 5 }, // ‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ -> ‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      { stopIndex: 5, travelTime: 5, stopOrder: 4, nextStopIndex: 0 }, // ‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏ö‡πâ‡πÄ‡∏ö‡πâ -> ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
      { stopIndex: 0, travelTime: 2, stopOrder: 5, nextStopIndex: 3 }, // ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ -> Big C
    ];

    for (const stop of route3Stops) {
      await prisma.routeBusStop.create({
        data: {
          routeId: routes[2].routeId,
          busStopId: busStops[stop.stopIndex].busStopId,
          nextStopId: busStops[stop.nextStopIndex].busStopId,
          stopOrder: stop.stopOrder,
          travelTime: stop.travelTime,
        },
      });
    }

    // Create Vehicles
    const vehicles = await Promise.all([
      prisma.vehicle.upsert({
        where: { licensePlate: "‡∏Å‡∏Ç-1234" },
        update: {},
        create: {
          licensePlate: "‡∏Å‡∏Ç-1234",
          vehicleTypeId: busType.VehicleTypeId,
          capacity: 30,
          status: "ACTIVE",
          currentStopId: busStops[0].busStopId,
        },
      }),
      prisma.vehicle.upsert({
        where: { licensePlate: "‡∏Å‡∏Ç-5678" },
        update: {},
        create: {
          licensePlate: "‡∏Å‡∏Ç-5678",
          vehicleTypeId: busType.VehicleTypeId,
          capacity: 30,
          status: "ACTIVE",
          currentStopId: busStops[1].busStopId,
        },
      }),
      prisma.vehicle.upsert({
        where: { licensePlate: "‡∏Å‡∏Ç-9012" },
        update: {},
        create: {
          licensePlate: "‡∏Å‡∏Ç-9012",
          vehicleTypeId: vanType.VehicleTypeId,
          capacity: 15,
          status: "ACTIVE",
          currentStopId: busStops[2].busStopId,
        },
      }),
    ]);

    // Get existing driver user
    const driverUser = await prisma.user.findFirst({
      where: { 
        role: {
          roleName: 'driver'
        }
      },
      include: {
        role: true
      }
    });

    if (!driverUser) {
      throw new Error('Driver user not found. Please run main seed first to create driver user.');
    }

    console.log(`üìß Using existing driver: ${driverUser.firstName} ${driverUser.lastName} (${driverUser.email})`);

    // Create Vehicle Route Schedules for today and tomorrow
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);

    const schedules = [];

    // Today's schedules
    schedules.push(
      // Morning ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 1
      await prisma.vehicleRouteSchedule.create({
        data: {
          vehicleId: vehicles[0].vehicleId,
          routeId: routes[0].routeId,
          driverId: driverUser.userId,
          scheduleTime: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 7, 0),
          status: 'UPCOMING',
        },
      }),
      // Morning ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 2
      await prisma.vehicleRouteSchedule.create({
        data: {
          vehicleId: vehicles[1].vehicleId,
          routeId: routes[1].routeId,
          driverId: driverUser.userId,
          scheduleTime: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
          status: 'UPCOMING',
        },
      }),
      // Afternoon ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 3
      await prisma.vehicleRouteSchedule.create({
        data: {
          vehicleId: vehicles[2].vehicleId,
          routeId: routes[2].routeId,
          driverId: driverUser.userId,
          scheduleTime: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 14, 0),
          status: 'COMPLETED',
        },
      })
    );

    // Tomorrow's schedules
    schedules.push(
      await prisma.vehicleRouteSchedule.create({
        data: {
          vehicleId: vehicles[0].vehicleId,
          routeId: routes[0].routeId,
          driverId: driverUser.userId,
          scheduleTime: new Date(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 7, 0),
          status: 'UPCOMING',
        },
      }),
      await prisma.vehicleRouteSchedule.create({
        data: {
          vehicleId: vehicles[1].vehicleId,
          routeId: routes[1].routeId,
          driverId: driverUser.userId,
          scheduleTime: new Date(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 16, 0),
          status: 'UPCOMING',
        },
      })
    );

    // Create some sample bookings
    const studentRole = await prisma.role.findUnique({
      where: { roleName: 'student' },
    });

    if (studentRole) {
      const studentUsers = await Promise.all([
        prisma.user.upsert({
          where: { email: 'student1@example.com' },
          update: {},
          create: {
            firstName: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
            lastName: '‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1',
            email: 'student1@example.com',
            password: '$2b$10$example',
            roleId: studentRole.roleId,
          },
        }),
        prisma.user.upsert({
          where: { email: 'student2@example.com' },
          update: {},
          create: {
            firstName: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
            lastName: '‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2',
            email: 'student2@example.com',
            password: '$2b$10$example',
            roleId: studentRole.roleId,
          },
        }),
      ]);

      // Create bookings for today's schedules
      await Promise.all([
        prisma.booking.create({
          data: {
            userId: studentUsers[0].userId,
            vehicleRouteScheduleId: schedules[0].vehicleRouteScheduleId,
            originStopId: busStops[0].busStopId, // ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
            destinationStopId: busStops[1].busStopId, // ‡πÇ‡∏•‡∏ï‡∏±‡∏™
            status: 'BOOKED',
          },
        }),
        prisma.booking.create({
          data: {
            userId: studentUsers[1].userId,
            vehicleRouteScheduleId: schedules[0].vehicleRouteScheduleId,
            originStopId: busStops[0].busStopId, // ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
            destinationStopId: busStops[3].busStopId, // Big C
            status: 'BOOKED',
          },
        }),
        prisma.booking.create({
          data: {
            userId: studentUsers[0].userId,
            vehicleRouteScheduleId: schedules[1].vehicleRouteScheduleId,
            originStopId: busStops[0].busStopId, // ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
            destinationStopId: busStops[4].busStopId, // ‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡πå
            status: 'BOOKED',
          },
        }),
      ]);
    }

    console.log('‚úÖ Driver data seeded successfully!');
    console.log(`üìß Driver login: ${driverUser.email}`);
    console.log(`üöå Created ${vehicles.length} vehicles`);
    console.log(`üõ£Ô∏è Created ${routes.length} routes:`);
    console.log(`   - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: 30 ‡∏ô‡∏≤‡∏ó‡∏µ (7 ‡∏à‡∏∏‡∏î)`);
    console.log(`   - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: 13 ‡∏ô‡∏≤‡∏ó‡∏µ (4 ‡∏à‡∏∏‡∏î)`);
    console.log(`   - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: 12 ‡∏ô‡∏≤‡∏ó‡∏µ (5 ‡∏à‡∏∏‡∏î)`);
    console.log(`üìÖ Created ${schedules.length} schedules`);
    console.log(`üöè Created ${busStops.length} bus stops`);

  } catch (error) {
    console.error('‚ùå Error seeding driver data:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

seedDriverData();
